package application.model;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import application.utils.UncheckedRemoteException;
import fr.upem.rmirest.bilmancamp.interfaces.Book;

public class BookAsynchrone {

	private String title;
	private String image;
	private List<String> authors;
	private int rate;
	private String date;
	private final List<String> commentsText;
	private final String commentAuthor;
	private final Book book;
	private final int id;

	public BookAsynchrone(Book book, int id, String title, List<String> authors, String date, int rate, String image) {
		this.book = book;
		this.id = id;
		this.authors = authors;
		this.date = date;
		this.rate = rate;
		this.title = Objects.requireNonNull(title);
		this.image = Objects.requireNonNull(image);

		// Workaround for the moment.
		commentsText = new ArrayList<>();
		commentAuthor = "Jefferson Mangue";
		for (int i = 0; i < 5; ++i) {
			commentsText.add(
					"Test test Par son ouverture et ses possibilités de déploiement, la plate-forme Google Androïd basé sur Linux offre un socle et un environnement de développement puissants pour créer des applications mobiles robustes et ergonomiques. Elle met à la portée des professionnels et des particuliers la réalisation d'applications à la fois riches en fonctionnalités et adaptées aux contraintes de l'utilisation mobile.");
		}
	}

	/**
	 * Has to be called in the thread reserved for RMI transfers.
	 * 
	 * @throws RemoteException
	 */
	public static BookAsynchrone createBookAsynchrone(Book book) throws RemoteException {
		String title = book.getTitle();
		String mainImage = book.getMainImage();
		List<String> authors = book.getAuthors();
		String date = book.getDate().toString();
		int rate = (int) book.getRate();
		int id = book.getId();
		
		return new BookAsynchrone(book, id, title, authors, date, rate, mainImage);
	}

	BookAsynchrone update() throws RemoteException {
		title = book.getTitle();
		image = book.getMainImage();
		authors = book.getAuthors();
		date = book.getDate().toString();
		rate = (int) book.getRate();
		// TODO update COMMENTS HERE !!
		return this;
	}

	public Book getRemoteBook() {
		return book;
	}

	public String getTitle() {
		return title;
	}

	public int getRate() {
		return rate;
	}

	public List<String> getAuthors() {
		return Collections.unmodifiableList(authors);
	}

	public String getCommentAuthor() {
		return commentAuthor;
	}

	public List<String> getCommentText() {
		return commentsText;
	}

	public String getDate() {
		return date;
	}

	public int getId() {
		return id;
	}

	public String getImage() {
		return image;
	}

	public static List<BookAsynchrone> convertToBooksAsynchrone(List<Book> books) throws RemoteException {
		try {
			return books.stream().map(b -> {
				try {
					return BookAsynchrone.createBookAsynchrone(b);
				} catch (RemoteException e) {
					throw new UncheckedRemoteException(e);
				}
			}).collect(Collectors.toList());
		} catch (UncheckedRemoteException e) {
			throw e.getCause();
		}
	}

	public static final String DEBUG = "";
}
